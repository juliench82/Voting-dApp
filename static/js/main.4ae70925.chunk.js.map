{"version":3,"sources":["utilities/contract.js","zustand/wallet.js","zustand/contract.js","utilities/wallet.js","elements/Wallet.jsx","elements/WorkflowStatus.jsx","elements/UserStatus.jsx","elements/RegisteringVoters.jsx","elements/StartProposalsRegistering.jsx","elements/EndProposalsRegistering.jsx","elements/StartVotingSession.jsx","elements/EndVotingSession.jsx","elements/TallyVotes.jsx","elements/RegisteringProposals.jsx","elements/VotingSession.jsx","elements/ProposalsRegistrationEnded.jsx","elements/NotConnected.jsx","elements/VotingSessionEnded.jsx","elements/VotesTallied.jsx","elements/ContractAddress.jsx","elements/Whitelist.jsx","elements/ProposalsArray.jsx","elements/Voting.jsx","utilities/web3.js","App.js","utilities/serviceWorker.js","index.js"],"names":["contractInstance","store","create","set","web3","ready","connected","address","isVoter","isOwner","hasVoted","votedProposalId","proposals","setWeb3","connect","state","disconnect","resetVote","addProposals","addProposal","proposal","newProposals","push","workflowStatus","votingSessionId","voters","log","noContractSet","addLog","addVoters","addVoter","voter","newVoters","resetContract","loadContract","web3Provider","eth","net","getId","networkId","deployedNetwork","votingContract","networks","contractStore","setState","Contract","abi","getWorkflowStatus","events","allEvents","err","event","console","warn","triggerEvent","subscribeEvent","returnValues","newStatus","walletStore","getState","Web3","utils","toChecksumAddress","voterAddress","getProposal","proposalId","description","getPermissions","getVoter","isRegistered","methods","owner","call","sessionId","setVoter","send","from","vote","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","getVoters","getPastEvents","fromBlock","toBlock","voterEvents","getProposals","proposalsArray","proposalEvent","id","voteCount","tallyVotes","getWinningProposalId","winning","subscriptions","eventName","callback","undefined","Object","values","evt","storeConnect","getAccounts","accounts","Array","isArray","Wallet","handleClick","classes","textButton","substr","onClick","className","join","WorkflowStatus","map","status","key","toString","getWorkflowStatusName","UserStatus","RegisteringVoters","useState","getInput","setInput","getDisabled","setDisabled","useEffect","handleAddVoter","isAddressValid","test","value","onChange","e","target","disabled","index","length","StartProposalsRegistering","EndProposalsRegistering","StartVotingSession","EndVotingSession","TallyVotes","RegisteringProposals","handleAddProposal","trim","VotingSession","setProposals","ProposalsRegistrationEnded","NotConnected","VotingSessionEnded","VotesTallied","winningProposal","setWinningProposal","ContractAddress","rel","href","Whitelist","ProposalsArray","Voting","displayWorkflowStatus","displayStartProposalsRegistering","displayEndProposalsRegistering","displayStartVotingSession","displayTallyVotes","displayEndVotingSession","allowedAccess","accountChanged","Promise","resolve","reject","window","addEventListener","ethereum","enable","on","provider","providers","HttpProvider","App","then","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.4ae70925.chunk.js","sourcesContent":["import votingContract from '../contracts/Voting.json';\nimport contractStore from '../zustand/contract';\nimport walletStore from '../zustand/wallet';\nimport Web3 from 'web3';\n\nlet contractInstance;\n\n/**\n *\n * @param web3Provider\n * @return {Promise<void>}\n */\nasync function loadContract(web3Provider) {\n    const networkId = await web3Provider.eth.net.getId();\n    const deployedNetwork = votingContract.networks[networkId];\n\n    if (!deployedNetwork || !deployedNetwork.address) {\n        contractStore.setState({ noContractSet: true });\n        return;\n    }\n\n    contractInstance = new web3Provider.eth.Contract(\n        votingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n    );\n\n    const workflowStatus = await getWorkflowStatus();\n\n\n    contractInstance.events.allEvents(\n        {},\n        (err, event) => {\n            if (err) {\n                return console.warn(err);\n            }\n            triggerEvent(event)\n        }\n    );\n\n    subscribeEvent('WorkflowStatusChange', (event) => {\n        contractStore.setState({ workflowStatus: event.returnValues.newStatus });\n        switch (event.returnValues.newStatus) {\n            case '0':\n                walletStore.getState().resetVote();\n                contractStore.getState().resetContract();\n                break;\n            case '1':\n                contractStore.getState().addLog('Proposal registration is started');\n                break;\n            case '2':\n                contractStore.getState().addLog('Proposal registration ended');\n                break;\n            case '3':\n                contractStore.getState().addLog('Voting session started');\n                break;\n            case '4':\n                contractStore.getState().addLog('Voting sessions ended');\n                break;\n            case '5':\n                contractStore.getState().addLog('Votes tallied');\n                break;\n        }\n    });\n\n    subscribeEvent('VoterRegistered', (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voterAddress) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            walletStore.setState({ isVoter: true });\n            contractStore.getState().addLog('You have been registered as a voter');\n\n        } else if (walletStore.getState().isOwner) {\n            contractStore.getState().addLog('New voter added ' + event.returnValues.voterAddress);\n        }\n\n        contractStore.getState().addVoter({\n            address: event.returnValues.voterAddress\n        });\n    });\n\n    subscribeEvent('ProposalRegistered', async (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voter) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            const proposal = await getProposal(event.returnValues.proposalId);\n\n            contractStore.getState().addLog('Your proposal has been registered #' + event.returnValues.proposalId);\n\n            walletStore.getState().addProposal({\n                proposalId: event.returnValues.proposalId,\n                description: proposal.description,\n            });\n        } else if(walletStore.getState().isOwner) {\n            contractStore.getState().addLog('A new proposal has been registered #' + event.returnValues.proposalId);\n        }\n    });\n\n    subscribeEvent('Voted', (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voter) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            walletStore.setState({ hasVoted: true, votedProposalId: event.returnValues.proposalId });\n            contractStore.getState().addLog('Your vote has been saved');\n        } else if (walletStore.getState().isOwner) {\n            contractStore.getState().addLog('A new vote happened from ' + event.returnValues.voter);\n        }\n    });\n\n    contractStore.setState({ ready: true, workflowStatus, address: deployedNetwork.address });\n}\n\n/**\n *\n * @param address\n * @return {Promise<*[]>}\n */\nasync function getPermissions(address) {\n    if (!contractInstance) {\n        return;\n    }\n    const voter = await getVoter(address);\n\n    if (voter.isRegistered) {\n        walletStore.setState({ isVoter: true, hasVoted: voter.hasVoted, votedProposalId: voter.votedProposalId });\n    }\n\n    const owner = await contractInstance.methods.owner().call();\n\n    if (Web3.utils.toChecksumAddress(owner) === Web3.utils.toChecksumAddress(address)) {\n        walletStore.setState({ isOwner: true });\n    }\n}\n\n/**\n *\n * @param address\n * @return {Promise<{hasVoted: boolean, isRegistered: boolean, votedProposalId}>}\n */\nasync function getVoter(address) {\n    const voter = await contractInstance.methods.voters(address).call();\n\n    return (({ isRegistered, hasVoted, votedProposalId, sessionId }) => ({ isRegistered, hasVoted, votedProposalId, sessionId }))(voter);\n}\n\n/**\n *\n * @return {Promise<null|*>}\n */\nasync function getWorkflowStatus() {\n    if (!contractInstance) {\n        return null;\n    }\n    return await contractInstance.methods.workflowStatus().call();\n}\n\n/**\n *\n * @param address\n * @return {Promise<*>}\n */\nasync function setVoter(address) {\n    return await contractInstance.methods.addVoter(address).send({from: walletStore.getState().address});\n}\n\n/**\n *\n * @param proposalId\n * @return {Promise<*>}\n */\nasync function vote(proposalId) {\n    return await contractInstance.methods.vote(proposalId).send({from: walletStore.getState().address});\n}\n\n/**\n *\n * @return {Promise<*>}\n */\nasync function nextStatus() {\n    return await contractInstance.methods.nextStatus().send({from: walletStore.getState().address});\n}\n\n/**\n *\n * @return {Promise<*>}\n */\n async function startProposalsRegistering() {\n    return await contractInstance.methods.startProposalsRegistering().send({from: walletStore.getState().address});\n}\n\n/**\n *\n * @return {Promise<*>}\n */\n async function endProposalsRegistering() {\n    return await contractInstance.methods.endProposalsRegistering().send({from: walletStore.getState().address});\n}\n\n/**\n *\n * @return {Promise<*>}\n */\n async function startVotingSession() {\n    return await contractInstance.methods.startVotingSession().send({from: walletStore.getState().address});\n}\n\n/**\n *\n * @return {Promise<*>}\n */\n async function endVotingSession() {\n    return await contractInstance.methods.endVotingSession().send({from: walletStore.getState().address});\n}\n\n/**\n *\n * @param proposal\n * @return {Promise<*>}\n */\nasync function addProposal(proposal) {\n    return await contractInstance.methods.addProposal(proposal).send({from: walletStore.getState().address});\n}\n\n/**\n *\n * @param proposalId\n * @return {Promise<*>}\n */\nasync function getProposal(proposalId) {\n    return await contractInstance.methods.proposals(proposalId).call();\n}\n\n/**\n *\n * @param workflowStatus\n * @return {string}\n */\nfunction getWorkflowStatusName(workflowStatus) {\n    workflowStatus = workflowStatus.toString();\n    let status;\n\n    switch (workflowStatus) {\n        case '0':\n            status = 'Registering voters'\n            break;\n        case '1':\n            status = 'Proposal registration'\n            break;\n        case '2':\n            status = 'Proposal registration has ended'\n            break;\n        case '3':\n            status = 'Voting session'\n            break;\n        case '4':\n            status = 'Voting session has ended'\n            break;\n        case '5':\n            status = 'Votes have been tallied'\n            break;\n        default:\n            status = 'This status does not exist'\n    }\n\n    return status;\n}\n\n/**\n *\n * @return {Promise<*[]>}\n */\nasync function getVoters() {\n    const voterEvents = await contractInstance.getPastEvents('VoterRegistered', {\n        fromBlock: 0,\n        toBlock: 'latest',\n    });\n\n    const voters = [];\n\n    for (const voter of voterEvents) {\n        voters.push({\n            address: voter.returnValues.voterAddress,\n        });\n    }\n\n    return voters;\n}\n\n/**\n *\n * @param addressFrom\n * @return {Promise<*[]>}\n */\nasync function getProposals(addressFrom = null) {\n\n    const proposals = await contractInstance.getPastEvents('ProposalRegistered', {\n        fromBlock: 0,\n        toBlock: 'latest',\n    });\n\n    const proposalsArray = [];\n\n    for (const proposalEvent of proposals) {\n        const proposal = await getProposal(proposalEvent.returnValues.proposalId);\n        proposalsArray.push({\n            id: proposalEvent.returnValues.proposalId,\n            description: proposal.description,\n            voteCount: proposal.voteCount,\n        });\n    }\n\n    return proposalsArray;\n}\n\n/**\n *\n * @return {Promise<*>}\n */\n async function tallyVotes() {\n    return await contractInstance.methods.tallyVotes().send({from: walletStore.getState().address});\n}\n\n/**\n *\n */\n async function getWinningProposalId() {\n    const winning = await contractInstance.methods.getWinningProposalId().call();\n    return {proposalId: winning.proposalId, description: winning.description, voteCount: winning.voteCount};\n\n}\n\nconst subscriptions = {};\nfunction subscribeEvent(eventName, callback) {\n    if (subscriptions[eventName] === undefined) {\n        subscriptions[eventName] = [];\n    }\n    subscriptions[eventName].push(callback);\n}\n\nfunction triggerEvent(event) {\n    if (subscriptions[event.event] !== undefined) {\n        for (const evt of Object.values(subscriptions[event.event])) {\n            evt(event);\n        }\n    }\n    if (subscriptions['*'] !== undefined) {\n        for (const evt of Object.values(subscriptions['*'])) {\n            evt(event);\n        }\n    }\n}\n\nexport {\n    loadContract,\n    getWorkflowStatus,\n    getPermissions,\n    getVoters,\n    setVoter,\n    vote,\n    getWorkflowStatusName,\n    nextStatus,\n    startProposalsRegistering,\n    endProposalsRegistering,\n    startVotingSession,\n    endVotingSession,\n    addProposal,\n    getProposals,\n    tallyVotes,\n    getWinningProposalId\n};\n","import create from 'zustand';\n\nconst store = create(set => ({\n    web3: null, // Web3 provider\n    ready: false, // True when web3 provider is ready\n    connected: false,\n    address: null,\n    isVoter: false,\n    isOwner: false,\n    hasVoted: false,\n    votedProposalId: null,\n    proposals: [],\n    setWeb3: (web3) => set({web3}),\n    connect: (address) => set(state => ({ connected: true, address })),\n    disconnect: () => set({ connected: false, address: null, isVoter: false, isOwner: false, hasVoted: false }),\n    resetVote: () => set({ isVoter: false, hasVoted: false }),\n    addProposals: (proposals) => set({ proposals }),\n    addProposal: (proposal) => set(state => {\n        const newProposals = [...state.proposals];\n        newProposals.push(proposal);\n        return {proposals: newProposals}\n    }),\n}));\n\nexport default store;\n","import create from 'zustand';\n\nconst store = create(set => ({\n    ready: false,\n    address: null,\n    workflowStatus: null,\n    votingSessionId: null,\n    voters: [],\n    log: null,\n    noContractSet: null,\n    addLog: (log) => set({log}),\n    addVoters: (voters) => set({ voters }),\n    addVoter: (voter) => set(state => {\n        const newVoters = [...state.voters];\n        newVoters.push(voter);\n        return {voters: newVoters}\n    }),\n    resetContract: () => set({ voters: [] }),\n}));\n\nexport default store;\n","import {getPermissions} from \"./contract\";\nimport walletStore from \"../zustand/wallet\";\n\nasync function connect() {\n    const storeConnect = walletStore.getState().connect;\n    const web3 = walletStore.getState().web3;\n\n    const accounts = await web3.eth.getAccounts();\n\n    if (Array.isArray(accounts) && accounts[0]) {\n        storeConnect(accounts[0]);\n        await getPermissions(accounts[0]);\n        return true;\n    }\n\n    return false;\n}\n\nfunction disconnect() {\n    walletStore.getState().disconnect();\n}\n\nexport {connect, disconnect}\n","import React from 'react';\nimport walletStore from '../zustand/wallet';\nimport {connect, disconnect} from \"../utilities/wallet\";\n\nfunction Wallet() {\n    // Load the data from store\n    const { ready, connected, address } = walletStore(state => ({web3: state.web3, ready: state.ready, connected: state.connected, address: state.address}));\n\n    const handleClick = async () => {\n        if (!ready) {\n            // Web3 must be ready before any interaction\n            return;\n        }\n\n        if (!connected) {\n            await connect();\n        } else {\n            // We want to disconnect the current account\n            await disconnect();\n        }\n    }\n\n    const classes = ['btn-wallet', 'btn'];\n    let textButton = 'Loading';\n    if (ready && !connected) {\n        textButton = 'Connect'\n    } else if (connected) {\n        textButton = address.substr(0, 6) + '....' + address.substr(-4);\n        classes.push('btn-wallet-connected');\n    }\n\n    return (\n        <button id=\"wallet\" onClick={handleClick}  className={classes.join(' ')}>\n            {textButton}\n        </button>\n    );\n}\n\nexport default Wallet;\n","import React from 'react';\nimport contractStore from \"../zustand/contract\";\nimport {getWorkflowStatusName} from \"../utilities/contract\";\n\nfunction WorkflowStatus() {\n\n    const {workflowStatus} = contractStore(state => ({ workflowStatus: state.workflowStatus}));\n    \n    return (\n        <div>\n            <h3>Status</h3>\n            {[0,1,2,3,4,5].map((status)=>{\n                return (\n                    <div className=\"Status\" key={status}>\n                        {workflowStatus === status.toString() ? '├' : ' '}  {getWorkflowStatusName(status)}\n                    </div>\n                )\n            })}\n        </div>\n    );\n}\n\nexport default WorkflowStatus;\n","import React from 'react';\nimport walletStore from \"../zustand/wallet\";\n\nfunction UserStatus() {\n\n    const {isVoter, isOwner} = walletStore(state => ({ isVoter: state.isVoter, isOwner: state.isOwner }));\n\n    return (\n    <div>\n        <h3>Your role(s)</h3>\n        <div className=\"Status\">\n            <div>Owner {isOwner ? '┤' : ' '} </div>\n            <div>Voter {isVoter ? '┤' : ' '} </div>\n        </div>\n    </div>    \n    );\n}\n\nexport default UserStatus;\n","import React, {useEffect, useState} from 'react';\nimport {setVoter, getVoters} from \"../utilities/contract\";\nimport contractStore from \"../zustand/contract\";\n\nfunction RegisteringVoters() {\n    const [getInput, setInput] = useState('');\n    const [getDisabled, setDisabled] = useState(true);\n    const {voters} = contractStore(state => ({ voters: state.voters }));\n    const addVoters = contractStore.getState().addVoters;\n\n    useEffect(() => {\n        (async () => {\n            addVoters(await getVoters());\n        })();\n    }, );\n\n    const handleAddVoter = async () => {\n        await setVoter(getInput);\n        setInput('');\n    }\n\n    const handleInputChange = (e) => {\n        setDisabled(!isAddressValid(e.target.value));\n        setInput(e.target.value);\n    }\n    \n    const isAddressValid = (address) => {\n        if (typeof address !== 'string') {\n            return false;\n        }\n\n        return /^0x[a-fA-F0-9]{40}$/.test(address);\n    }\n\n    return (\n        <>\n            <div className=\"central\">\n            <h2>Voter registration</h2>\n            <input className=\"input-address\" value={getInput} onChange={handleInputChange} />\n            <button disabled={getDisabled} onClick={handleAddVoter}>Add voter</button>\n                <><h3>Voters whitelisted</h3>\n                    <table>\n                        <tbody>\n                        {voters.map((voter, index) =>\n                            <tr key={index}>\n                                <td>{voter.address}</td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n                </>\n        \n            {voters.length === 0 &&\n            <div>\n                You don't have any voter(s) registered yet</div>\n            }\n            </div>\n        </>\n    )\n}\n\nexport default RegisteringVoters;\n\n","import React from 'react';\nimport {startProposalsRegistering} from \"../utilities/contract\";\n\nfunction StartProposalsRegistering() {\n\n    const handleClick = async () => {\n        await startProposalsRegistering();\n    }\n\n    return (\n        <button className=\"btn-propreg\" onClick={handleClick}>\n            Start proposals registering\n        </button>\n    );\n}\n\nexport default StartProposalsRegistering;","import React from 'react';\nimport {endProposalsRegistering} from \"../utilities/contract\";\n\nfunction EndProposalsRegistering() {\n\n    const handleClick = async () => {\n        await endProposalsRegistering();\n    }\n\n    return (\n        <button className=\"btn-propreg\" onClick={handleClick}>\n            End proposals registratering\n        </button>\n    );\n}\n\nexport default EndProposalsRegistering;","import React from 'react';\nimport {startVotingSession} from \"../utilities/contract\";\n\nfunction StartVotingSession() {\n\n    const handleClick = async () => {\n        await startVotingSession();\n    }\n\n    return (\n        <button className=\"btn-propreg\" onClick={handleClick}>\n            Start voting session\n        </button>\n    );\n}\n\nexport default StartVotingSession;","import React from 'react';\nimport {endVotingSession} from \"../utilities/contract\";\n\nfunction EndVotingSession() {\n\n    const handleClick = async () => {\n        await endVotingSession();\n    }\n\n    return (\n        <button className=\"btn-propreg\" onClick={handleClick}>\n            End voting session\n        </button>\n    );\n}\n\nexport default EndVotingSession;","import React from \"react\";\r\nimport {tallyVotes} from \"../utilities/contract\";\r\n\r\nfunction TallyVotes() {\r\n\r\n    const handleClick = async () => {\r\n        await tallyVotes();\r\n    }\r\n\r\n    return (\r\n        <button className=\"btn-propreg\" onClick={handleClick}>\r\n            Tally votes\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default TallyVotes;","import React, {useEffect, useState} from 'react';\nimport {addProposal, getProposals} from \"../utilities/contract\";\nimport walletStore from \"../zustand/wallet\";\n\nfunction RegisteringProposals() {\n    const [getInput, setInput] = useState('');\n    const [getDisabled, setDisabled] = useState(true);\n\n    const {address, proposals} = walletStore(state => ({ address: state.address, proposals: state.proposals }));\n    const addProposals = walletStore.getState().addProposals;\n\n    useEffect(() => {\n        (async () => {\n            addProposals(await getProposals(address));\n        })();\n    }, );\n\n    const handleAddProposal = async () => {\n        await addProposal(getInput.trim());\n        setInput('');\n    }\n\n    const handleInputChange = (e) => {\n        setInput(e.target.value);\n        setDisabled(e.target.value.trim() === '');\n    }\n\n    return (\n        <><div className=\"central\">\n            <h2>Registering proposals</h2>\n            <input className=\"input-address\" value={getInput} onChange={handleInputChange}/>\n            <button disabled={getDisabled} onClick={handleAddProposal}>Add proposal</button>\n            {proposals.length > 0 &&\n                <>\n                    <h3>Proposals</h3>\n                    <table>\n                        <tbody>\n                        {proposals.map((proposal, index) =>\n                            <tr key={index}>\n                                <td>ID #{index}</td>\n                                <td>{proposal.description}</td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n\n                </>\n            }\n\n            {proposals.length === 0 &&\n            <div>You don't have any proposal registered yet</div>}\n            </div>\n        </>\n    )\n}\n\nexport default RegisteringProposals;\n\n","import React, {useEffect, useState} from 'react';\nimport {getProposals, vote} from \"../utilities/contract\";\nimport walletStore from \"../zustand/wallet\";\n\nfunction VotingSession() {\n    const [proposals, setProposals] = useState([]);\n\n    const {hasVoted, votedProposalId} = walletStore(state => ({ hasVoted: state.hasVoted, votedProposalId: state.votedProposalId }));\n\n    useEffect(() => {\n        (async () => {\n            setProposals(await getProposals());\n        })();\n    }, []);\n\n    const handleClick = async (proposalId) => {\n        await vote(proposalId);\n    }\n\n    return (\n        <><div className=\"central\">\n            <h2>Proposals available for vote</h2>\n            Please pick up your favourite proposal!\n            <table>\n                <tbody>\n                {proposals.map((proposal) =>\n                    <tr key={proposal.id}>\n                        <td><span className=\"proposal-id\">{proposal.id}</span></td>\n                        <td>{proposal.description}</td>\n                        <td>\n                            {(hasVoted && votedProposalId === proposal.id) && '√'}\n                            {(hasVoted && votedProposalId !== proposal.id) && ''}\n                            {!hasVoted && <button onClick={() => handleClick(proposal.id)}>Vote</button>}\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n            </div>\n        </>\n    )\n}\n\nexport default VotingSession;\n\n","import React from 'react';\n\nfunction ProposalsRegistrationEnded() {\n\n    return (\n        <><div className=\"propended\">\n            <h2>Proposals Registration Ended</h2>\n            <p>Voting session will begin soon...</p>\n            </div>\n            </>\n    )\n}\n\nexport default ProposalsRegistrationEnded;\n\n","import React from 'react';\n\nfunction NotConnected() {\n    return (\n        <><p>Not connected...</p></>\n    )\n}\n\nexport default NotConnected;\n\n","import React from 'react';\n\nfunction VotingSessionEnded() {\n\n    return (\n        <><div className=\"central\">\n            <h2>Voting Session Ended</h2>\n            <p>The voting session has been ended by the administrator.</p>\n            </div>\n            </>\n    )\n}\n\nexport default VotingSessionEnded;\n\n","import React, {useEffect, useState} from 'react';\nimport {getWinningProposalId} from \"../utilities/contract\";\n\nfunction VotesTallied() {\n    const [winningProposal, setWinningProposal] = useState(null);\n\n    useEffect(() => {\n        (async () => {\n            setWinningProposal(await getWinningProposalId());\n        })();\n    }, []);\n\n    if (winningProposal === null) {\n        return (<>\n        <div className=\"winning\">\n        <h2>Oh la la</h2>\n        </div>\n        </>\n        )\n    }\n\n    return (\n        <><div className=\"winning\">\n            <h2>The winning proposal is</h2>\n            <p>{winningProposal.description} with {winningProposal.voteCount} vote(s) !</p>\n            </div>\n        </>\n    )\n}\n\nexport default VotesTallied;","import React from 'react';\r\nimport contractStore from \"../zustand/contract\";\r\n\r\nfunction ContractAddress() {\r\n    const {address} = contractStore(state => ({address: state.address}));\r\n\r\n    return (\r\n    <div>\r\n        <h3>Contract address</h3>\r\n        <div className=\"contract\">\r\n        <div><a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://ropsten.etherscan.io/address/' + address}> {address}</a></div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default ContractAddress;\r\n","import React, {useEffect} from 'react';\r\nimport {getVoters} from \"../utilities/contract\";\r\nimport contractStore from \"../zustand/contract\";\r\n\r\nfunction Whitelist() {\r\n\r\n    const {voters} = contractStore(state => ({ voters: state.voters }));\r\n    const addVoters = contractStore.getState().addVoters;\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            addVoters(await getVoters());\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <><div className=\"whitelist\">\r\n            <><h3>Voters whitelisted</h3>\r\n                <table>\r\n                    <tbody>\r\n                    {voters.map((voter, index) =>\r\n                        <tr key={index}>\r\n                            <td>{voter.address}</td>\r\n                        </tr>\r\n                    )}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n    \r\n        {voters.length === 0 &&\r\n        <div>You don't have any voter registered yet</div>\r\n        }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Whitelist;\r\n","import React, {useEffect} from 'react';\r\nimport {getProposals} from \"../utilities/contract\";\r\nimport walletStore from \"../zustand/wallet\";\r\n\r\nfunction ProposalsArray() {\r\n\r\n    const {address, proposals} = walletStore(state => ({ address: state.address, proposals: state.proposals }));\r\n    const addProposals = walletStore.getState().addProposals;\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            addProposals(await getProposals(address));\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <><div className=\"proposals\">\r\n            {proposals.length > 0 &&\r\n                <><h3>Your proposals</h3>\r\n                    <table>\r\n                        <tbody>\r\n                        {proposals.map((proposal, index) =>\r\n                            <tr key={index}>\r\n                                <td>{proposal.description}</td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </table>\r\n                    \r\n                </>\r\n            }\r\n\r\n            {proposals.length === 0 &&\r\n            <div><h3>Your proposals</h3>You don't have any proposal registered yet</div>}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProposalsArray;\r\n\r\n","import React from 'react';\nimport Wallet from \"./Wallet\";\nimport WorkflowStatus from \"./WorkflowStatus\";\nimport UserStatus from \"./UserStatus\";\nimport walletStore from \"../zustand/wallet\";\nimport contractStore from \"../zustand/contract\";\nimport RegisteringVoters from \"./RegisteringVoters\";\nimport StartProposalsRegistering from \"./StartProposalsRegistering\";\nimport EndProposalsRegistering from \"./EndProposalsRegistering\";\nimport StartVotingSession from \"./StartVotingSession\";\nimport EndVotingSession from \"./EndVotingSession\";\nimport TallyVotes from \"./TallyVotes\";\nimport RegisteringProposals from \"./RegisteringProposals\";\nimport VotingSession from \"./VotingSession\";\nimport ProposalsRegistrationEnded from \"./ProposalsRegistrationEnded\";\nimport NotConnected from \"./NotConnected\";\nimport VotingSessionEnded from \"./VotingSessionEnded\";\nimport VotesTallied from './VotesTallied';\nimport ContractAddress from \"./ContractAddress\"\nimport Whitelist from './Whitelist';\nimport ProposalsArray from './ProposalsArray';\n\nfunction Voting() {\n    const {isVoter, isOwner, connected} = walletStore(state => ({ isVoter: state.isVoter, isOwner: state.isOwner, connected: state.connected, voters: state.voters }));\n    const {ready, workflowStatus} = contractStore(state => ({ ready: state.ready, workflowStatus: state.workflowStatus}));\n\n    if (!ready) {\n        return (\n            <>\n                <div id=\"main\">\n                    <p>Please connect your wallet</p>\n                </div>\n            </>\n        );\n    }\n\n    let displayWorkflowStatus = false, displayStartProposalsRegistering = false, displayEndProposalsRegistering = false, displayStartVotingSession = false, displayTallyVotes = false, displayEndVotingSession = false, allowedAccess = false;\n\n    if (isOwner || isVoter) {\n        displayWorkflowStatus = true;\n        allowedAccess = true;\n    }\n\n    if (isOwner && workflowStatus === '0') {\n        displayStartProposalsRegistering = true;\n    }\n\n    if (isOwner && workflowStatus === '1') {\n        displayEndProposalsRegistering = true;\n    }\n\n    if (isOwner && workflowStatus === '2') {\n        displayStartVotingSession = true;\n    }\n\n    if (isOwner && workflowStatus === '3') {\n        displayEndVotingSession = true;\n    }\n\n    if (isOwner && workflowStatus === '4') {\n        displayTallyVotes = true;\n    }\n\n    if (isOwner && workflowStatus === '5') {\n\n    }\n\n    return (\n        <>\n            <div id=\"header\">\n                {!allowedAccess &&\n                    <div><p>Please connect your wallet to get access to the application...</p>\n                    </div>\n                }\n                <div className=\"side-right\">\n                    <Wallet/>\n                </div>\n            </div>\n            <div id=\"main\">\n                        {allowedAccess &&\n                            <div className=\"leftbar\">\n                                <UserStatus/>\n                                <ContractAddress/>\n                                <Whitelist/>\n                                <ProposalsArray/>\n                            </div>\n                        }\n                        {connected &&\n                            <div id=\"sidebars\">\n                            {(displayWorkflowStatus || displayStartProposalsRegistering || displayEndProposalsRegistering || displayStartVotingSession || displayEndVotingSession || displayTallyVotes ) &&\n                            <div className=\"sidebar\">\n                                {displayWorkflowStatus && <WorkflowStatus/>}\n                                {displayStartProposalsRegistering && <StartProposalsRegistering/>}\n                                {displayEndProposalsRegistering && <EndProposalsRegistering/>}\n                                {displayStartVotingSession && <StartVotingSession/>}\n                                {displayEndVotingSession && <EndVotingSession/>}\n                                {displayTallyVotes && <TallyVotes/>}\n                            </div>\n                        }\n                    </div>\n                }\n                <div id=\"content\">\n                    {allowedAccess &&\n                        <div>\n                            {!connected && <NotConnected/>}\n                            {(isOwner && workflowStatus === '0') && <RegisteringVoters/>}\n                            {(isVoter && workflowStatus === '1') && <RegisteringProposals/>}\n                            {(isVoter && workflowStatus === '2') && <ProposalsRegistrationEnded/>}\n                            {(isVoter && workflowStatus === '3') && <VotingSession/>}\n                            {(isVoter && workflowStatus === '4') && <VotingSessionEnded/>}\n                            {(isVoter && workflowStatus === '5') && <VotesTallied/>}\n                        </div>\n                    }\n                </div>\n\n            </div>\n        </>\n    )\n}\n\nexport default Voting;\n","import Web3 from \"web3\";\n\nconst web3 = (accountChanged = () => {}) =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n\n          window.ethereum.on('accountsChanged', accountChanged)\n\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default web3;\n","import React, {useEffect} from 'react';\nimport Voting from './elements/Voting'\nimport web3 from \"./utilities/web3\";\nimport {loadContract} from \"./utilities/contract\";\nimport walletStore from \"./zustand/wallet\";\nimport './App.css';\nimport {connect, disconnect} from \"./utilities/wallet\";\n\nfunction App() {\n  useEffect(() => {\n    web3(async () => {\n      await disconnect();\n      await connect();\n    }).then(async (web3Provider) => {\n      walletStore.setState({ web3: web3Provider, ready: true });\n      await loadContract(web3Provider);\n      await connect();\n    });\n  }, []);\n\n  return <Voting/>;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './utilities/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}