{"version":3,"sources":["helpers/contract.js","stores/wallet.js","stores/contract.js","helpers/wallet.js","components/Wallet.jsx","components/WorkflowStatus.jsx","components/UserStatus.jsx","components/ProposalsArray.jsx","stores/app.js","pages/RegisteringVoters.jsx","components/StartProposalsRegistering.jsx","components/EndProposalsRegistering.jsx","components/StartVotingSession.jsx","components/EndVotingSession.jsx","components/GetResults.jsx","pages/RegisteringProposals.jsx","pages/VotingSession.jsx","components/NextStatus.jsx","pages/ProposalsRegistrationEnded.jsx","pages/NotConnected.jsx","pages/VotingSessionEnded.jsx","pages/VotesTallied.jsx","pages/Voting.jsx","helpers/web3.js","App.js","serviceWorker.js","index.js"],"names":["contractInstance","store","create","set","web3","ready","connected","address","isVoter","isOwner","hasVoted","votedProposalId","proposals","setWeb3","connect","state","disconnect","resetVote","addProposals","addProposal","proposal","newProposals","push","workflowStatus","votingSessionId","voters","log","noContractSet","addLog","addVoters","addVoter","voter","newVoters","resetContract","loadContract","web3Provider","eth","net","getId","networkId","deployedNetwork","votingContract","networks","contractStore","setState","Contract","abi","getWorkflowStatus","events","allEvents","err","event","console","warn","triggerEvent","subscribeEvent","returnValues","newStatus","walletStore","getState","Web3","utils","toChecksumAddress","voterAddress","getProposal","proposalId","description","getPermissions","getVoter","isRegistered","methods","owner","call","sessionId","setVoter","send","from","vote","nextStatus","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","getVoters","getPastEvents","fromBlock","toBlock","voterEvents","getProposals","proposalsArray","proposalEvent","id","voteCount","getResults","results","subscriptions","eventName","callback","undefined","Object","values","evt","storeConnect","getAccounts","accounts","Array","isArray","Wallet","handleClick","classes","textButton","substr","onClick","className","join","WorkflowStatus","map","status","key","toString","getWorkflowStatusName","UserStatus","ProposalsArray","startError","RegisteringVoters","useState","getInput","setInput","getDisabled","setDisabled","useEffect","handleAddVoter","isAddressValid","test","value","onChange","e","target","disabled","index","length","StartProposalsRegistering","EndProposalsRegistering","StartVotingSession","EndVotingSession","NextStatus","RegisteringProposals","handleAddProposal","trim","VotingSession","setProposals","ProposalsRegistrationEnded","NotConnected","VotingSessionEnded","VotesTallied","winningProposal","setWinningProposal","Voting","appStore","displayWorkflowStatus","displayNextStatus","displayResetBallot","displayStartProposalsRegistering","displayEndProposalsRegistering","displayStartVotingSession","displayGetWinner","displayEndVotingSession","allowedAccess","rel","href","GetResults","accountChanged","Promise","resolve","reject","window","addEventListener","ethereum","enable","on","provider","providers","HttpProvider","App","then","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.61dcd53c.chunk.js","sourcesContent":["import votingContract from '../contracts/Voting.json';\nimport contractStore from '../stores/contract';\nimport walletStore from '../stores/wallet';\nimport Web3 from 'web3';\n\nlet contractInstance;\n\n/**\n * Load the contract with our web3 provider\n *\n * @param web3Provider\n * @return {Promise<void>}\n */\nasync function loadContract(web3Provider) {\n    const networkId = await web3Provider.eth.net.getId();\n    const deployedNetwork = votingContract.networks[networkId];\n\n    if (!deployedNetwork || !deployedNetwork.address) {\n        contractStore.setState({ noContractSet: true });\n        return;\n    }\n\n    contractInstance = new web3Provider.eth.Contract(\n        votingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n    );\n\n    // As we have the contract we can already get the workflow status\n    const workflowStatus = await getWorkflowStatus();\n\n\n    contractInstance.events.allEvents(\n        {},\n        (err, event) => {\n            if (err) {\n                return console.warn(err);\n            }\n            triggerEvent(event)\n        }\n    );\n\n    subscribeEvent('WorkflowStatusChange', (event) => {\n        contractStore.setState({ workflowStatus: event.returnValues.newStatus });\n        switch (event.returnValues.newStatus) {\n            case '0':\n                walletStore.getState().resetVote();\n                contractStore.getState().resetContract();\n                break;\n            case '1':\n                contractStore.getState().addLog('Proposal registration is started');\n                break;\n            case '2':\n                contractStore.getState().addLog('Proposal registration ended');\n                break;\n            case '3':\n                contractStore.getState().addLog('Voting session started');\n                break;\n            case '4':\n                contractStore.getState().addLog('Voting sessions ended');\n                break;\n            case '5':\n                contractStore.getState().addLog('Votes tallied');\n                break;\n        }\n    });\n\n    subscribeEvent('VoterRegistered', (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voterAddress) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            walletStore.setState({ isVoter: true });\n            contractStore.getState().addLog('You have been registered as a voter');\n\n        } else if (walletStore.getState().isOwner) {\n            contractStore.getState().addLog('New voter added ' + event.returnValues.voterAddress);\n        }\n\n        contractStore.getState().addVoter({\n            address: event.returnValues.voterAddress\n        });\n    });\n\n    subscribeEvent('ProposalRegistered', async (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voter) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            const proposal = await getProposal(event.returnValues.proposalId);\n\n            contractStore.getState().addLog('Your proposal has been registered #' + event.returnValues.proposalId);\n\n            walletStore.getState().addProposal({\n                proposalId: event.returnValues.proposalId,\n                description: proposal.description,\n            });\n        } else if(walletStore.getState().isOwner) {\n            contractStore.getState().addLog('A new proposal has been registered #' + event.returnValues.proposalId);\n        }\n    });\n\n    subscribeEvent('Voted', (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voter) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            walletStore.setState({ hasVoted: true, votedProposalId: event.returnValues.proposalId });\n            contractStore.getState().addLog('Your vote has been saved');\n        } else if (walletStore.getState().isOwner) {\n            contractStore.getState().addLog('A new vote happened from ' + event.returnValues.voter);\n        }\n    });\n\n    // Save the state\n    contractStore.setState({ ready: true, workflowStatus, address: deployedNetwork.address });\n}\n\n/**\n * Get the permissions for an address\n * an store it inside contract store\n *\n * @todo: rename this function as we do more than just getting permissions\n *\n * @param address\n * @return {Promise<*[]>}\n */\nasync function getPermissions(address) {\n    if (!contractInstance) {\n        return;\n    }\n    const voter = await getVoter(address);\n\n    if (voter.isRegistered) {\n        walletStore.setState({ isVoter: true, hasVoted: voter.hasVoted, votedProposalId: voter.votedProposalId });\n    }\n\n    const owner = await contractInstance.methods.owner().call();\n\n    if (Web3.utils.toChecksumAddress(owner) === Web3.utils.toChecksumAddress(address)) {\n        walletStore.setState({ isOwner: true });\n    }\n}\n\n/**\n * Get a voter from contract\n *\n * @param address\n * @return {Promise<{hasVoted: boolean, isRegistered: boolean, votedProposalId}>}\n */\nasync function getVoter(address) {\n    const voter = await contractInstance.methods.voters(address).call();\n\n    return (({ isRegistered, hasVoted, votedProposalId, sessionId }) => ({ isRegistered, hasVoted, votedProposalId, sessionId }))(voter);\n}\n\n/**\n * Get the workflow status of the voting session\n *\n * @return {Promise<null|*>}\n */\nasync function getWorkflowStatus() {\n    if (!contractInstance) {\n        return null;\n    }\n    return await contractInstance.methods.workflowStatus().call();\n}\n\n/**\n * Save a voter on the blockchain\n *\n * @param address\n * @return {Promise<*>}\n */\nasync function setVoter(address) {\n    return await contractInstance.methods.addVoter(address).send({from: walletStore.getState().address});\n}\n\n/**\n * Vote for a proposal\n *\n * @param proposalId\n * @return {Promise<*>}\n */\nasync function vote(proposalId) {\n    return await contractInstance.methods.vote(proposalId).send({from: walletStore.getState().address});\n}\n\n/**\n * Change to the next status\n *\n * @return {Promise<*>}\n */\nasync function nextStatus() {\n    return await contractInstance.methods.nextStatus().send({from: walletStore.getState().address});\n}\n\n/**\n * Change to the status Start Proposals Registering \n *\n * @return {Promise<*>}\n */\n async function startProposalsRegistering() {\n    return await contractInstance.methods.startProposalsRegistering().send({from: walletStore.getState().address});\n}\n\n/**\n * Change to the status Start Proposals Registering \n *\n * @return {Promise<*>}\n */\n async function endProposalsRegistering() {\n    return await contractInstance.methods.endProposalsRegistering().send({from: walletStore.getState().address});\n}\n\n/**\n * Change to the status Start Proposals Registering \n *\n * @return {Promise<*>}\n */\n async function startVotingSession() {\n    return await contractInstance.methods.startVotingSession().send({from: walletStore.getState().address});\n}\n\n/**\n * Change to the status Start Proposals Registering \n *\n * @return {Promise<*>}\n */\n async function endVotingSession() {\n    return await contractInstance.methods.endVotingSession().send({from: walletStore.getState().address});\n}\n\n/**\n * Add a new proposal\n *\n * @param proposal\n * @return {Promise<*>}\n */\nasync function addProposal(proposal) {\n    return await contractInstance.methods.addProposal(proposal).send({from: walletStore.getState().address});\n}\n\n/**\n * Get a proposal\n *\n * @param proposalId\n * @return {Promise<*>}\n */\nasync function getProposal(proposalId) {\n    return await contractInstance.methods.proposals(proposalId).call();\n}\n\n/**\n * Reset the voting session\n * @returns {Promise<*>}\n */\nasync function resetBallot() {\n    return await contractInstance.methods.reset().send({from: walletStore.getState().address});\n}\n\n/**\n * Return the human readable text for a workflow status\n *\n * @param workflowStatus\n * @return {string}\n */\nfunction getWorkflowStatusName(workflowStatus) {\n    workflowStatus = workflowStatus.toString();\n    let status;\n\n    switch (workflowStatus) {\n        case '0':\n            status = 'Registering voters'\n            break;\n        case '1':\n            status = 'Proposal registration'\n            break;\n        case '2':\n            status = 'Proposal registration has ended'\n            break;\n        case '3':\n            status = 'Voting session'\n            break;\n        case '4':\n            status = 'Voting session has ended'\n            break;\n        case '5':\n            status = 'Votes tallied'\n            break;\n        default:\n            status = 'Not a valid status'\n    }\n\n    return status;\n}\n\n/**\n * Retrieve all voters for the current session\n *\n * @return {Promise<*[]>}\n */\nasync function getVoters() {\n    const voterEvents = await contractInstance.getPastEvents('VoterRegistered', {\n        fromBlock: 0,\n        toBlock: 'latest',\n    });\n\n    const voters = [];\n\n    for (const voter of voterEvents) {\n        voters.push({\n            address: voter.returnValues.voterAddress,\n        });\n    }\n\n    return voters;\n}\n\n/**\n * Retrieve all proposals for the current session\n * Can be filtered an address\n *\n * @param addressFrom\n * @return {Promise<*[]>}\n */\nasync function getProposals(addressFrom = null) {\n\n    const proposals = await contractInstance.getPastEvents('ProposalRegistered', {\n        fromBlock: 0,\n        toBlock: 'latest',\n    });\n\n    const proposalsArray = [];\n\n    for (const proposalEvent of proposals) {\n        const proposal = await getProposal(proposalEvent.returnValues.proposalId);\n        proposalsArray.push({\n            id: proposalEvent.returnValues.proposalId,\n            description: proposal.description,\n            voteCount: proposal.voteCount,\n        });\n    }\n\n    return proposalsArray;\n}\n\n/**\n * Return the winning proposal\n *\n * @return {Promise<{description: *, proposalId: *}>}\n */\nasync function getResults() {\n    const results = await contractInstance.methods.getResults().call();\n\n    return {proposalId: results.proposalId, description: results.description, voteCount: results.voteCount};\n}\n\nconst subscriptions = {};\nfunction subscribeEvent(eventName, callback) {\n    if (subscriptions[eventName] === undefined) {\n        subscriptions[eventName] = [];\n    }\n    subscriptions[eventName].push(callback);\n}\n\nfunction triggerEvent(event) {\n    if (subscriptions[event.event] !== undefined) {\n        for (const evt of Object.values(subscriptions[event.event])) {\n            evt(event);\n        }\n    }\n    if (subscriptions['*'] !== undefined) {\n        for (const evt of Object.values(subscriptions['*'])) {\n            evt(event);\n        }\n    }\n}\n\nexport {\n    loadContract,\n    getWorkflowStatus,\n    getPermissions,\n    getVoters,\n    setVoter,\n    vote,\n    getWorkflowStatusName,\n    nextStatus,\n    startProposalsRegistering,\n    endProposalsRegistering,\n    startVotingSession,\n    endVotingSession,\n    addProposal,\n    getProposals,\n    getResults,\n    resetBallot\n};\n","import create from 'zustand';\n\nconst store = create(set => ({\n    web3: null, // Web3 provider\n    ready: false, // True when web3 provider is ready\n    connected: false,\n    address: null,\n    isVoter: false,\n    isOwner: false,\n    hasVoted: false,\n    votedProposalId: null,\n    proposals: [],\n    setWeb3: (web3) => set({web3}),\n    connect: (address) => set(state => ({ connected: true, address })),\n    disconnect: () => set({ connected: false, address: null, isVoter: false, isOwner: false, hasVoted: false }),\n    resetVote: () => set({ isVoter: false, hasVoted: false }),\n    addProposals: (proposals) => set({ proposals }),\n    addProposal: (proposal) => set(state => {\n        const newProposals = [...state.proposals];\n        newProposals.push(proposal);\n        return {proposals: newProposals}\n    }),\n}));\n\nexport default store;\n","import create from 'zustand';\n\nconst store = create(set => ({\n    ready: false,\n    address: null,\n    workflowStatus: null,\n    votingSessionId: null,\n    voters: [],\n    log: null,\n    noContractSet: null,\n    addLog: (log) => set({log}),\n    addVoters: (voters) => set({ voters }),\n    addVoter: (voter) => set(state => {\n        const newVoters = [...state.voters];\n        newVoters.push(voter);\n        return {voters: newVoters}\n    }),\n    resetContract: () => set({ voters: [] }),\n}));\n\nexport default store;\n","import {getPermissions} from \"./contract\";\nimport walletStore from \"../stores/wallet\";\n\nasync function connect() {\n    const storeConnect = walletStore.getState().connect;\n    const web3 = walletStore.getState().web3;\n\n    const accounts = await web3.eth.getAccounts();\n\n    if (Array.isArray(accounts) && accounts[0]) {\n        storeConnect(accounts[0]);\n        await getPermissions(accounts[0]);\n        return true;\n    }\n\n    return false;\n}\n\nfunction disconnect() {\n    walletStore.getState().disconnect();\n}\n\nexport {connect, disconnect}\n","import React from 'react';\nimport walletStore from '../stores/wallet';\nimport {connect, disconnect} from \"../helpers/wallet\";\n\nfunction Wallet() {\n    // Load the data from store\n    const { ready, connected, address } = walletStore(state => ({web3: state.web3, ready: state.ready, connected: state.connected, address: state.address}));\n\n    const handleClick = async () => {\n        if (!ready) {\n            // Web3 must be ready before any interaction\n            return;\n        }\n\n        if (!connected) {\n            await connect();\n        } else {\n            // We want to disconnect the current account\n            await disconnect();\n        }\n    }\n\n    const classes = ['btn-wallet', 'btn'];\n    let textButton = 'Loading';\n    if (ready && !connected) {\n        textButton = 'Connect'\n    } else if (connected) {\n        textButton = address.substr(0, 6) + '....' + address.substr(-4);\n        classes.push('btn-wallet-connected');\n    }\n\n    return (\n        <button id=\"wallet\" onClick={handleClick}  className={classes.join(' ')}>\n            {textButton}\n        </button>\n    );\n}\n\nexport default Wallet;\n","import React from 'react';\nimport contractStore from \"../stores/contract\";\nimport {getWorkflowStatusName} from \"../helpers/contract\";\n\nfunction WorkflowStatus() {\n\n    const {ready, workflowStatus} = contractStore(state => ({ready: state.ready, workflowStatus: state.workflowStatus}));\n\n    if (!ready) {\n        // Status not yet initialized\n        return <></>;\n    }\n\n    return (\n        <div>\n            <h3>Current status :</h3>\n            {[0,1,2,3,4,5].map((status)=>{\n                return (\n                    <div key={status}>\n                        {workflowStatus === status.toString() ? '√' : ' '}  {getWorkflowStatusName(status)}\n                    </div>\n                )\n            })}\n        </div>\n    );\n}\n\nexport default WorkflowStatus;\n","import React from 'react';\nimport walletStore from \"../stores/wallet\";\n\nfunction UserStatus() {\n\n    const {isVoter, isOwner} = walletStore(state => ({ isVoter: state.isVoter, isOwner: state.isOwner }));\n\n    return (\n        <div className=\"test\">\n            <h3>Your permissions :</h3>\n            <div>{isOwner ? '√' : ' '} Owner</div>\n\n            <div>{isVoter ? '√' : ' '} Voter</div>\n        </div>\n    );\n}\n\nexport default UserStatus;\n","import React, {useEffect, useState} from 'react';\r\n\r\nfunction ProposalsArray( { proposals }) {\r\n    const proposalsArray = \r\n      <div>\r\n        <h4>List of current proposals</h4>\r\n        <table>\r\n          <tbody>\r\n            <tr><th>Id</th><th>Description</th></tr>\r\n            {proposals.map((proposal) => \r\n              (<tr key={proposal.id}><td>{proposal.returnValues._proposalId}</td><td>{proposal.returnValues._desc}</td></tr>))}\r\n          </tbody>\r\n        </table>\r\n        <br/>\r\n      </div> \r\n\r\n    return (\r\n      <div>\r\n        {ProposalsArray}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ProposalsArray;","import create from 'zustand';\n\nconst store = create(set => ({\n    startError: null,\n}));\n\nexport default store;\n","import React, {useEffect, useState} from 'react';\nimport {setVoter, getVoters} from \"../helpers/contract\";\nimport contractStore from \"../stores/contract\";\nimport walletStore from \"../stores/wallet\";\n\nfunction RegisteringVoters() {\n    const [getInput, setInput] = useState('');\n    const [getDisabled, setDisabled] = useState(true);\n\n    const {isVoter, isOwner, connected} = walletStore(state => ({ isVoter: state.isVoter, isOwner: state.isOwner, connected: state.connected }));\n\n    const {voters} = contractStore(state => ({ voters: state.voters }));\n    const addVoters = contractStore.getState().addVoters;\n\n    useEffect(() => {\n        (async () => {\n            addVoters(await getVoters());\n        })();\n    }, []);\n\n    const handleAddVoter = async () => {\n        await setVoter(getInput);\n        setInput('');\n    }\n\n    const handleInputChange = (e) => {\n        setDisabled(!isAddressValid(e.target.value));\n        setInput(e.target.value);\n    }\n    \n    const isAddressValid = (address) => {\n        if (typeof address !== 'string') {\n            return false;\n        }\n\n        return /^0x[a-fA-F0-9]{40}$/.test(address);\n    }\n\n    let allowedAccess=false;\n\n    return (\n        <>\n            <div className=\"test\">\n            <h2>Add a voter</h2>\n            <input className=\"input-address\" value={getInput} onChange={handleInputChange} />\n            <button disabled={getDisabled} onClick={handleAddVoter}>Add voter</button>\n                <><h3>Voters whitelisted</h3>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Address</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {voters.map((voter, index) =>\n                            <tr key={index}>\n                                <td>{index}</td>\n                                <td>{voter.address}</td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n                </>\n        \n            {voters.length === 0 &&\n            <div>\n                You don't have any voter registered yet</div>\n            }\n            </div>\n        </>\n    )\n}\n\nexport default RegisteringVoters;\n\n","import React from 'react';\nimport {startProposalsRegistering} from \"../helpers/contract\";\n\nfunction StartProposalsRegistering() {\n\n    const handleClick = async () => {\n        await startProposalsRegistering();\n    }\n\n    return (\n        <button className=\"btn-propreg\" onClick={handleClick}>\n            Start proposals registering\n        </button>\n    );\n}\n\nexport default StartProposalsRegistering;","import React from 'react';\nimport {endProposalsRegistering} from \"../helpers/contract\";\n\nfunction EndProposalsRegistering() {\n\n    const handleClick = async () => {\n        await endProposalsRegistering();\n    }\n\n    return (\n        <button className=\"btn-propreg\" onClick={handleClick}>\n            End proposals registratering\n        </button>\n    );\n}\n\nexport default EndProposalsRegistering;","import React from 'react';\nimport {startVotingSession} from \"../helpers/contract\";\n\nfunction StartVotingSession() {\n\n    const handleClick = async () => {\n        await startVotingSession();\n    }\n\n    return (\n        <button className=\"btn-propreg\" onClick={handleClick}>\n            Start voting session\n        </button>\n    );\n}\n\nexport default StartVotingSession;","import React from 'react';\nimport {endVotingSession} from \"../helpers/contract\";\n\nfunction EndVotingSession() {\n\n    const handleClick = async () => {\n        await endVotingSession();\n    }\n\n    return (\n        <button className=\"btn-propreg\" onClick={handleClick}>\n            End voting session\n        </button>\n    );\n}\n\nexport default EndVotingSession;","import React from 'react';\nimport {nextStatus} from \"../helpers/contract\";\n\nfunction NextStatus() {\n\n    const handleClick = async () => {\n        await nextStatus();\n    }\n\n    return (\n        <button className=\"btn-status\" onClick={handleClick}>\n            Get the winning proposal\n        </button>\n    );\n}\n\nexport default NextStatus;\n","import React, {useEffect, useState} from 'react';\nimport {addProposal, getProposals} from \"../helpers/contract\";\nimport walletStore from \"../stores/wallet\";\n\nfunction RegisteringProposals() {\n    const [getInput, setInput] = useState('');\n    const [getDisabled, setDisabled] = useState(true);\n\n    const {address, proposals} = walletStore(state => ({ address: state.address, proposals: state.proposals }));\n    const addProposals = walletStore.getState().addProposals;\n\n    useEffect(() => {\n        (async () => {\n            addProposals(await getProposals(address));\n        })();\n    }, []);\n\n    const handleAddProposal = async () => {\n        await addProposal(getInput.trim());\n        setInput('');\n    }\n\n    const handleInputChange = (e) => {\n        setInput(e.target.value);\n        setDisabled(e.target.value.trim() === '');\n    }\n\n    return (\n        <>\n            <h2>Registering proposals</h2>\n            <input className=\"input-address\" value={getInput} onChange={handleInputChange}/>\n            <button disabled={getDisabled} onClick={handleAddProposal}>Add proposal</button>\n            {proposals.length > 0 &&\n                <>\n                    <h3>Your proposals</h3>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Proposal</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {proposals.map((proposal, index) =>\n                            <tr key={index}>\n                                <td>{index}</td>\n                                <td>{proposal.description}</td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n                </>\n            }\n\n            {proposals.length === 0 &&\n            <div>You don't have any proposal registered yet</div>}\n        </>\n    )\n}\n\nexport default RegisteringProposals;\n\n","import React, {useEffect, useState} from 'react';\nimport {getProposals, vote} from \"../helpers/contract\";\nimport walletStore from \"../stores/wallet\";\n\nfunction VotingSession() {\n    const [proposals, setProposals] = useState([]);\n\n    const {hasVoted, votedProposalId} = walletStore(state => ({ hasVoted: state.hasVoted, votedProposalId: state.votedProposalId }));\n\n    useEffect(() => {\n        (async () => {\n            setProposals(await getProposals());\n        })();\n    }, []);\n\n    const handleClick = async (proposalId) => {\n        await vote(proposalId);\n    }\n\n    return (\n        <>\n            <div className=\"test\">\n            <h2>Proposals available for vote</h2>\n            Please pick up your favourite proposal.\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Proposal</th>\n                        <th>Vote</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {proposals.map((proposal) =>\n                    <tr key={proposal.id}>\n                        <td><span className=\"proposal-id\">{proposal.id}</span></td>\n                        <td>{proposal.description}</td>\n                        <td>\n                            {(hasVoted && votedProposalId === proposal.id) && '√'}\n                            {(hasVoted && votedProposalId !== proposal.id) && ''}\n                            {!hasVoted && <button onClick={() => handleClick(proposal.id)}>Vote</button>}\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n            </div>\n        </>\n    )\n}\n\nexport default VotingSession;\n\n","import React from 'react';\nimport {nextStatus} from \"../helpers/contract\";\n\nfunction NextStatus() {\n\n    const handleClick = async () => {\n        await nextStatus();\n    }\n\n    return (\n        <button className=\"btn-status\" onClick={handleClick}>\n            Next Status\n        </button>\n    );\n}\n\nexport default NextStatus;\n","import React from 'react';\n\nfunction ProposalsRegistrationEnded() {\n\n    return (\n        <>\n            <h2>Proposals Registration Ended</h2>\n            <p>Voting session will begin soon...</p>\n            </>\n    )\n}\n\nexport default ProposalsRegistrationEnded;\n\n","import React from 'react';\n\nfunction NotConnected() {\n    return (\n        <><p>Not connected...</p></>\n    )\n}\n\nexport default NotConnected;\n\n","import React from 'react';\n\nfunction VotingSessionEnded() {\n\n    return (\n        <>\n            <h2>Voting Session Ended</h2>\n            <p>The voting session has been ended by the administrator.</p>\n            </>\n    )\n}\n\nexport default VotingSessionEnded;\n\n","import React, {useEffect, useState} from 'react';\nimport {getResults} from \"../helpers/contract\";\n\nfunction VotesTallied() {\n    const [winningProposal, setWinningProposal] = useState(null);\n\n    useEffect(() => {\n        (async () => {\n            setWinningProposal(await getResults());\n        })();\n    }, []);\n\n    if (winningProposal === null) {\n        return <><p>No winning proposal</p></>;\n    }\n\n    return (\n        <>\n            <div className=\"winning\">\n            <h2>Winning proposal</h2>\n            <p>\n                Proposal #{winningProposal.proposalId} win with {winningProposal.voteCount} vote(s) :\n            </p>\n            <p><b>{winningProposal.description}</b></p>\n            </div>\n        </>\n    )\n}\n\nexport default VotesTallied;\n\n","import React from 'react';\nimport Wallet from \"../components/Wallet\";\nimport WorkflowStatus from \"../components/WorkflowStatus\";\nimport UserStatus from \"../components/UserStatus\";\nimport VotersAddresses from \"../components/VotersAddresses\";\nimport ProposalsArray from \"../components/ProposalsArray\";\nimport walletStore from \"../stores/wallet\";\nimport contractStore from \"../stores/contract\";\nimport appStore from \"../stores/app\";\nimport RegisteringVoters from \"./RegisteringVoters\";\nimport StartProposalsRegistering from \"../components/StartProposalsRegistering\";\nimport EndProposalsRegistering from \"../components/EndProposalsRegistering\";\nimport StartVotingSession from \"../components/StartVotingSession\";\nimport EndVotingSession from \"../components/EndVotingSession\";\nimport GetResults from \"../components/GetResults\";\nimport RegisteringProposals from \"./RegisteringProposals\";\nimport VotingSession from \"./VotingSession\";\nimport NextStatus from \"../components/NextStatus\";\nimport ProposalsRegistrationEnded from \"./ProposalsRegistrationEnded\";\nimport NotConnected from \"./NotConnected\";\nimport VotingSessionEnded from \"./VotingSessionEnded\";\nimport VotesTallied from \"./VotesTallied\";\n\nfunction Voting() {\n    const {isVoter, isOwner, connected} = walletStore(state => ({ isVoter: state.isVoter, isOwner: state.isOwner, connected: state.connected }));\n    const {ready, noContractSet, workflowStatus, address} = contractStore(state => ({ ready: state.ready, noContractSet: state.noContractSet, workflowStatus: state.workflowStatus, address: state.address}));\n    const {startError} = appStore(state => ({startError: state.startError}));\n\n    if (!ready) {\n        return (\n            <>\n                <div id=\"main\">\n                    <p>Please connect your wallet</p>\n                    {startError !== null ? startError : \"Please connect your wallet\"}\n                </div>\n            </>\n        );\n    }\n\n    if (noContractSet) {\n        return (\n            <>\n                <div id=\"main\">\n                    No contract set\n                </div>\n            </>\n        );\n    }\n\n    let displayWorkflowStatus = false, displayNextStatus = false, displayResetBallot = false, displayStartProposalsRegistering = false, displayEndProposalsRegistering = false, displayStartVotingSession = false, displayGetWinner = false, displayEndVotingSession = false, allowedAccess = false;\n\n    if (isOwner || isVoter) {\n        displayWorkflowStatus = true;\n        allowedAccess = true;\n    }\n\n    if (isOwner && workflowStatus === '0') {\n        displayNextStatus = false;\n        displayStartProposalsRegistering = true;\n    }\n\n    if (isOwner && workflowStatus === '1') {\n        displayNextStatus = false;\n        displayEndProposalsRegistering = true;\n    }\n\n    if (isOwner && workflowStatus === '2') {\n        displayNextStatus = false;\n        displayStartVotingSession = true;\n    }\n\n    if (isOwner && workflowStatus === '3') {\n        displayNextStatus = false;\n        displayEndVotingSession = true;\n    }\n\n    if (isOwner && workflowStatus === '4') {\n        displayGetWinner = true;\n    }\n\n    if (isOwner && workflowStatus === '5') {\n        displayResetBallot = false;\n    }\n\n    return (\n        <>\n            <div id=\"header\">\n           \n                {!allowedAccess &&\n                    <div><p>You are not allowed to access the application.</p>\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://ropsten.etherscan.io/address/' + address}>Contract address : {address}</a>\n                    </div>       \n                }\n                <div className=\"side-right\">\n                    <Wallet/>\n                </div>\n\n            </div>\n\n            <div id=\"main\">\n                {connected &&\n                    <div id=\"sidebars\">\n                        {(displayWorkflowStatus || displayNextStatus || displayStartProposalsRegistering || displayEndProposalsRegistering || displayStartVotingSession || displayEndVotingSession || displayGetWinner || displayResetBallot) &&\n                            <div className=\"sidebar\">\n                                {displayWorkflowStatus && <WorkflowStatus/>}\n                                {displayNextStatus && <NextStatus/>}\n                                {displayStartProposalsRegistering && <StartProposalsRegistering/>}\n                                {displayEndProposalsRegistering && <EndProposalsRegistering/>}\n                                {displayStartVotingSession && <StartVotingSession/>}\n                                {displayEndVotingSession && <EndVotingSession/>}\n                                {displayGetWinner && <GetResults/>}\n                                {/*{displayResetBallot && <ResetBallot/>}*/}\n                            </div>\n                        }\n                        {allowedAccess &&\n                            <div className=\"sidebar\">\n                                <UserStatus/>\n                            </div>\n                        }\n                    </div>\n                }\n                <div id=\"content\">\n                    {allowedAccess &&\n                        <div>\n                            {!connected && <NotConnected/>}\n                            {(isOwner && workflowStatus === '0') && <RegisteringVoters/>}\n                            {(isVoter && workflowStatus === '1') && <RegisteringProposals/>}\n                            {(isVoter && workflowStatus === '2') && <ProposalsRegistrationEnded/>}\n                            {(isVoter && workflowStatus === '3') && <VotingSession/>}\n                            {(isVoter && workflowStatus === '4') && <VotingSessionEnded/>}\n                            {(isVoter && workflowStatus === '5') && <VotesTallied/>}\n                        </div>\n                    }\n                </div>\n\n            </div>\n        </>\n    )\n}\n\nexport default Voting;\n","import Web3 from \"web3\";\n\nconst web3 = (accountChanged = () => {}) =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n\n          window.ethereum.on('accountsChanged', accountChanged)\n\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default web3;\n","import React, {useEffect} from 'react';\nimport Voting from './pages/Voting'\nimport web3 from \"./helpers/web3\";\nimport {loadContract} from \"./helpers/contract\";\nimport walletStore from \"./stores/wallet\";\nimport './assets/css/normalize.css';\nimport './assets/css/app.css';\nimport {connect, disconnect} from \"./helpers/wallet\";\nimport appStore from \"./stores/app\";\n\nfunction App() {\n  useEffect(() => {\n    web3(async () => {\n      await disconnect();\n      await connect();\n    }).then(async (web3Provider) => {\n      walletStore.setState({ web3: web3Provider, ready: true });\n\n      // Load the contract\n      try {\n        await loadContract(web3Provider);\n      } catch (e) {\n        appStore.setState({startError: 'Loading contract failed. Please check your network'})\n      }\n\n      await connect();\n    });\n  }, []);\n\n  return <Voting />;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}